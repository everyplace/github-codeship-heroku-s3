{
  "name": "pushup",
  "version": "0.3.5",
  "main": "index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*"
  },
  "bin": {
    "pushup": "./bin/cli.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelnisi/pushup.git"
  },
  "author": {
    "name": "Michael Nisi",
    "email": "michael.nisi@gmail.com",
    "url": "http://michaelnisi.com"
  },
  "license": "MIT",
  "description": "upload last commit to S3",
  "keywords": [
    "upload",
    "commit",
    "S3"
  ],
  "dependencies": {
    "fstream": "0.1.x",
    "event-stream": "3.0.x",
    "knox": "0.3.x",
    "cop": ""
  },
  "devDependencies": {
    "tap": ">=0.3.1"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "# pushup - upload to S3\n\n[![Build Status](https://secure.travis-ci.org/michaelnisi/pushup.png)](http://travis-ci.org/michaelnisi/pushup)\n\n## Description\n\nThe pushup node module uploads files to a [S3](http://aws.amazon.com/s3/) bucket. Its main purpose is to upload the content of the latest commit (in a git repository); however, you can also use it to simply copy files or directories to S3.\n\n## CLI Usage\n\n    pushup git-repo\n    pushup file ...\n    pushup directory\n\nIn the first synopsis form, pushup uploads the content of the git-repo's latest commit. In the second synopsis form, a list of files is copied to S3; while in the third form, a directory and its entire subtree is copied. If you `pushup` without arguments, the current directory will be used. \n\nPushup's CLI retrieves the AWS security credentials from its environment; thus, you have to export them:\n\n    export AWS_ACCESS_KEY_ID=256\n    export AWS_SECRET_ACCESS_KEY=42\n    export S3_BUCKET=kahuna\n\n## Library Usage\n\nThe `pushup` function returns a Through-Stream, to which you can write filenames, and from which you can read target URLs. A target URL is emitted for each successful upload to S3.\n\n### Push latest commit to S3\n\n    var show = require('pushup/lib/show')\n      , pushup = require('pushup')\n      , path = 'path/to/repo'\n\n    var props = {\n      , key: 256\n      , secret: 42\n      , bucket: 'kahuna'\n    }\n\n    show(path)\n      .pipe(pushup(props))\n      .pipe(process.stdout)\n\n### Copy files to S3\n\n    var es = require('event-stream')\n      , pushup = require('pushup')\n      , files = ['path/to/file-1', 'path/to/file-2']\n\n    var props = {\n      , key: 256\n      , secret: 42\n      , bucket: 'kahuna'\n    }\n\n    es.readArray(files)\n      .pipe(pushup(props))\n      .pipe(process.stdout)\n\n### Copy directory and its entire subtree to S3\n\n    var props = {\n      , key: 256\n      , secret: 42\n      , bucket: 'kahuna'\n    }\n\n    var Reader = require('fstream').Reader\n      , cop = require('cop')\n      , pushup = require('pushup')\n      , relative = require('path').relative\n      , path = 'path/to/directory'\n      , reader = new Reader({ path:'.'} )\n   \n    process.chdir(path)\n      \n    reader\n      .pipe(cop(filter))\n      .pipe(pushup(props))\n      .pipe(process.stdout)\n\n    function filter (obj) {\n      var isFile = obj.type === 'File'\n      return isFile ? relative(process.cwd(), obj.path) : undefined\n    }\n\n## Events\n\nThe `pushup` function returns a readable and writable [Stream](http://nodejs.org/api/stream.html) that emits following events:\n\n### Event:'error'\n\n    function (err) {}\n\nEmitted if an error occured.\n\n### Event:'entry'\n\n    function (entry) {}\n\nEmitted when uploading of a file begins. The file is streamed to S3. The `entry` objects emit 'progress' events with following properties: `written`, `total`, and `percent`.\n\n### Event:'end'\n\n    function () {}\n\nEmitted when the upload is complete.\n\n### Event:'data'\n\n    function (response) {}\n\nThe 'data' event emits the url response from S3 when uploading of a file completes.\n\n## Installation\n\nInstall with [npm](http://npmjs.org/):\n\n    npm install pushup\n\nTo `pushup` from the command-line:\n\n    npm install -g pushup\n\n## License\n\n[MIT License](https://raw.github.com/michaelnisi/pushup/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "pushup@0.3.5",
  "_from": "pushup"
}
